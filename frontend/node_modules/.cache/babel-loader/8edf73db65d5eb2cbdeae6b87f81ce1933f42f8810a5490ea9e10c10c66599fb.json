{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { DEFAULT_HEADERS } from './constants';\nimport { isStorageVectorsError } from './errors';\nimport { post } from './fetch';\nimport { resolveFetch } from './helpers';\n/**\n * API class for managing Vector Data within Vector Indexes\n * Provides methods for inserting, querying, listing, and deleting vector embeddings\n */\nexport default class VectorDataApi {\n  constructor(url, headers = {}, fetch) {\n    this.shouldThrowOnError = false;\n    this.url = url.replace(/\\/$/, '');\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   * @example\n   * ```typescript\n   * const client = new VectorDataApi(url, headers)\n   * client.throwOnError()\n   * const { data } = await client.putVectors(options) // throws on error\n   * ```\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\n   * Inserts or updates vectors in batch (upsert operation)\n   * Accepts 1-500 vectors per request. Larger batches should be split\n   *\n   * @param options - Vector insertion options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the target index\n   * @param options.vectors - Array of vectors to insert/update (1-500 items)\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorConflictException` if duplicate key conflict occurs (HTTP 409)\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.putVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   vectors: [\n   *     {\n   *       key: 'doc-1',\n   *       data: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n   *       metadata: { title: 'Introduction', page: 1 }\n   *     },\n   *     {\n   *       key: 'doc-2',\n   *       data: { float32: [0.4, 0.5, 0.6, ...] },\n   *       metadata: { title: 'Conclusion', page: 42 }\n   *     }\n   *   ]\n   * })\n   * ```\n   */\n  putVectors(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // Validate batch size\n        if (options.vectors.length < 1 || options.vectors.length > 500) {\n          throw new Error('Vector batch size must be between 1 and 500 items');\n        }\n        const data = yield post(this.fetch, `${this.url}/PutVectors`, options, {\n          headers: this.headers\n        });\n        return {\n          data: data || {},\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves vectors by their keys in batch\n   * Optionally includes vector data and/or metadata in response\n   * Additional permissions required when returning data or metadata\n   *\n   * @param options - Vector retrieval options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.keys - Array of vector keys to retrieve\n   * @param options.returnData - Whether to include vector embeddings (requires permission)\n   * @param options.returnMetadata - Whether to include metadata (requires permission)\n   * @returns Promise with array of vectors or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.getVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   keys: ['doc-1', 'doc-2', 'doc-3'],\n   *   returnData: false,     // Don't return embeddings\n   *   returnMetadata: true   // Return metadata only\n   * })\n   * if (data) {\n   *   data.vectors.forEach(v => console.log(v.key, v.metadata))\n   * }\n   * ```\n   */\n  getVectors(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/GetVectors`, options, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Lists/scans vectors in an index with pagination\n   * Supports parallel scanning via segment configuration for high-throughput scenarios\n   * Additional permissions required when returning data or metadata\n   *\n   * @param options - Vector listing options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.maxResults - Maximum results per page (default: 500, max: 1000)\n   * @param options.nextToken - Pagination token from previous response\n   * @param options.returnData - Whether to include vector embeddings (requires permission)\n   * @param options.returnMetadata - Whether to include metadata (requires permission)\n   * @param options.segmentCount - Total parallel segments (1-16) for distributed scanning\n   * @param options.segmentIndex - Zero-based segment index (0 to segmentCount-1)\n   * @returns Promise with array of vectors, pagination token, or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Simple pagination\n   * let nextToken: string | undefined\n   * do {\n   *   const { data, error } = await client.listVectors({\n   *     vectorBucketName: 'embeddings-prod',\n   *     indexName: 'documents-openai-small',\n   *     maxResults: 500,\n   *     nextToken,\n   *     returnMetadata: true\n   *   })\n   *   if (error) break\n   *   console.log('Batch:', data.vectors.length)\n   *   nextToken = data.nextToken\n   * } while (nextToken)\n   *\n   * // Parallel scanning (4 concurrent workers)\n   * const workers = [0, 1, 2, 3].map(async (segmentIndex) => {\n   *   const { data } = await client.listVectors({\n   *     vectorBucketName: 'embeddings-prod',\n   *     indexName: 'documents-openai-small',\n   *     segmentCount: 4,\n   *     segmentIndex,\n   *     returnMetadata: true\n   *   })\n   *   return data?.vectors || []\n   * })\n   * const results = await Promise.all(workers)\n   * ```\n   */\n  listVectors(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // Validate segment configuration\n        if (options.segmentCount !== undefined) {\n          if (options.segmentCount < 1 || options.segmentCount > 16) {\n            throw new Error('segmentCount must be between 1 and 16');\n          }\n          if (options.segmentIndex !== undefined) {\n            if (options.segmentIndex < 0 || options.segmentIndex >= options.segmentCount) {\n              throw new Error(`segmentIndex must be between 0 and ${options.segmentCount - 1}`);\n            }\n          }\n        }\n        const data = yield post(this.fetch, `${this.url}/ListVectors`, options, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Queries for similar vectors using approximate nearest neighbor (ANN) search\n   * Returns top-K most similar vectors based on the configured distance metric\n   * Supports optional metadata filtering (requires GetVectors permission)\n   *\n   * @param options - Query options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.queryVector - Query embedding to find similar vectors\n   * @param options.topK - Number of nearest neighbors to return (default: 10)\n   * @param options.filter - Optional JSON filter for metadata (requires GetVectors permission)\n   * @param options.returnDistance - Whether to include similarity distances\n   * @param options.returnMetadata - Whether to include metadata (requires GetVectors permission)\n   * @returns Promise with array of similar vectors ordered by distance\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Semantic search with filtering\n   * const { data, error } = await client.queryVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   queryVector: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n   *   topK: 5,\n   *   filter: {\n   *     category: 'technical',\n   *     published: true\n   *   },\n   *   returnDistance: true,\n   *   returnMetadata: true\n   * })\n   * if (data) {\n   *   data.matches.forEach(match => {\n   *     console.log(`${match.key}: distance=${match.distance}`)\n   *     console.log('Metadata:', match.metadata)\n   *   })\n   * }\n   * ```\n   */\n  queryVectors(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/QueryVectors`, options, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes vectors by their keys in batch\n   * Accepts 1-500 keys per request\n   *\n   * @param options - Vector deletion options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.keys - Array of vector keys to delete (1-500 items)\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { error } = await client.deleteVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   keys: ['doc-1', 'doc-2', 'doc-3']\n   * })\n   * if (!error) {\n   *   console.log('Vectors deleted successfully')\n   * }\n   * ```\n   */\n  deleteVectors(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // Validate batch size\n        if (options.keys.length < 1 || options.keys.length > 500) {\n          throw new Error('Keys batch size must be between 1 and 500 items');\n        }\n        const data = yield post(this.fetch, `${this.url}/DeleteVectors`, options, {\n          headers: this.headers\n        });\n        return {\n          data: data || {},\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["DEFAULT_HEADERS","isStorageVectorsError","post","resolveFetch","VectorDataApi","constructor","url","headers","fetch","shouldThrowOnError","replace","Object","assign","throwOnError","putVectors","options","vectors","length","Error","data","error","getVectors","listVectors","segmentCount","undefined","segmentIndex","queryVectors","deleteVectors","keys"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/lib/vectors/VectorDataApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from './constants'\nimport { isStorageVectorsError } from './errors'\nimport { Fetch, post } from './fetch'\nimport { resolveFetch } from './helpers'\nimport {\n  ApiResponse,\n  PutVectorsOptions,\n  GetVectorsOptions,\n  GetVectorsResponse,\n  DeleteVectorsOptions,\n  ListVectorsOptions,\n  ListVectorsResponse,\n  QueryVectorsOptions,\n  QueryVectorsResponse,\n} from './types'\n\n/**\n * API class for managing Vector Data within Vector Indexes\n * Provides methods for inserting, querying, listing, and deleting vector embeddings\n */\nexport default class VectorDataApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n  protected shouldThrowOnError = false\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url.replace(/\\/$/, '')\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   * @example\n   * ```typescript\n   * const client = new VectorDataApi(url, headers)\n   * client.throwOnError()\n   * const { data } = await client.putVectors(options) // throws on error\n   * ```\n   */\n  public throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  /**\n   * Inserts or updates vectors in batch (upsert operation)\n   * Accepts 1-500 vectors per request. Larger batches should be split\n   *\n   * @param options - Vector insertion options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the target index\n   * @param options.vectors - Array of vectors to insert/update (1-500 items)\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorConflictException` if duplicate key conflict occurs (HTTP 409)\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.putVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   vectors: [\n   *     {\n   *       key: 'doc-1',\n   *       data: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n   *       metadata: { title: 'Introduction', page: 1 }\n   *     },\n   *     {\n   *       key: 'doc-2',\n   *       data: { float32: [0.4, 0.5, 0.6, ...] },\n   *       metadata: { title: 'Conclusion', page: 42 }\n   *     }\n   *   ]\n   * })\n   * ```\n   */\n  async putVectors(options: PutVectorsOptions): Promise<ApiResponse<undefined>> {\n    try {\n      // Validate batch size\n      if (options.vectors.length < 1 || options.vectors.length > 500) {\n        throw new Error('Vector batch size must be between 1 and 500 items')\n      }\n\n      const data = await post(this.fetch, `${this.url}/PutVectors`, options, {\n        headers: this.headers,\n      })\n      return { data: data || {}, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves vectors by their keys in batch\n   * Optionally includes vector data and/or metadata in response\n   * Additional permissions required when returning data or metadata\n   *\n   * @param options - Vector retrieval options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.keys - Array of vector keys to retrieve\n   * @param options.returnData - Whether to include vector embeddings (requires permission)\n   * @param options.returnMetadata - Whether to include metadata (requires permission)\n   * @returns Promise with array of vectors or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.getVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   keys: ['doc-1', 'doc-2', 'doc-3'],\n   *   returnData: false,     // Don't return embeddings\n   *   returnMetadata: true   // Return metadata only\n   * })\n   * if (data) {\n   *   data.vectors.forEach(v => console.log(v.key, v.metadata))\n   * }\n   * ```\n   */\n  async getVectors(options: GetVectorsOptions): Promise<ApiResponse<GetVectorsResponse>> {\n    try {\n      const data = await post(this.fetch, `${this.url}/GetVectors`, options, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Lists/scans vectors in an index with pagination\n   * Supports parallel scanning via segment configuration for high-throughput scenarios\n   * Additional permissions required when returning data or metadata\n   *\n   * @param options - Vector listing options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.maxResults - Maximum results per page (default: 500, max: 1000)\n   * @param options.nextToken - Pagination token from previous response\n   * @param options.returnData - Whether to include vector embeddings (requires permission)\n   * @param options.returnMetadata - Whether to include metadata (requires permission)\n   * @param options.segmentCount - Total parallel segments (1-16) for distributed scanning\n   * @param options.segmentIndex - Zero-based segment index (0 to segmentCount-1)\n   * @returns Promise with array of vectors, pagination token, or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Simple pagination\n   * let nextToken: string | undefined\n   * do {\n   *   const { data, error } = await client.listVectors({\n   *     vectorBucketName: 'embeddings-prod',\n   *     indexName: 'documents-openai-small',\n   *     maxResults: 500,\n   *     nextToken,\n   *     returnMetadata: true\n   *   })\n   *   if (error) break\n   *   console.log('Batch:', data.vectors.length)\n   *   nextToken = data.nextToken\n   * } while (nextToken)\n   *\n   * // Parallel scanning (4 concurrent workers)\n   * const workers = [0, 1, 2, 3].map(async (segmentIndex) => {\n   *   const { data } = await client.listVectors({\n   *     vectorBucketName: 'embeddings-prod',\n   *     indexName: 'documents-openai-small',\n   *     segmentCount: 4,\n   *     segmentIndex,\n   *     returnMetadata: true\n   *   })\n   *   return data?.vectors || []\n   * })\n   * const results = await Promise.all(workers)\n   * ```\n   */\n  async listVectors(options: ListVectorsOptions): Promise<ApiResponse<ListVectorsResponse>> {\n    try {\n      // Validate segment configuration\n      if (options.segmentCount !== undefined) {\n        if (options.segmentCount < 1 || options.segmentCount > 16) {\n          throw new Error('segmentCount must be between 1 and 16')\n        }\n        if (options.segmentIndex !== undefined) {\n          if (options.segmentIndex < 0 || options.segmentIndex >= options.segmentCount) {\n            throw new Error(`segmentIndex must be between 0 and ${options.segmentCount - 1}`)\n          }\n        }\n      }\n\n      const data = await post(this.fetch, `${this.url}/ListVectors`, options, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Queries for similar vectors using approximate nearest neighbor (ANN) search\n   * Returns top-K most similar vectors based on the configured distance metric\n   * Supports optional metadata filtering (requires GetVectors permission)\n   *\n   * @param options - Query options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.queryVector - Query embedding to find similar vectors\n   * @param options.topK - Number of nearest neighbors to return (default: 10)\n   * @param options.filter - Optional JSON filter for metadata (requires GetVectors permission)\n   * @param options.returnDistance - Whether to include similarity distances\n   * @param options.returnMetadata - Whether to include metadata (requires GetVectors permission)\n   * @returns Promise with array of similar vectors ordered by distance\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Semantic search with filtering\n   * const { data, error } = await client.queryVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   queryVector: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n   *   topK: 5,\n   *   filter: {\n   *     category: 'technical',\n   *     published: true\n   *   },\n   *   returnDistance: true,\n   *   returnMetadata: true\n   * })\n   * if (data) {\n   *   data.matches.forEach(match => {\n   *     console.log(`${match.key}: distance=${match.distance}`)\n   *     console.log('Metadata:', match.metadata)\n   *   })\n   * }\n   * ```\n   */\n  async queryVectors(options: QueryVectorsOptions): Promise<ApiResponse<QueryVectorsResponse>> {\n    try {\n      const data = await post(this.fetch, `${this.url}/QueryVectors`, options, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Deletes vectors by their keys in batch\n   * Accepts 1-500 keys per request\n   *\n   * @param options - Vector deletion options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Name of the index\n   * @param options.keys - Array of vector keys to delete (1-500 items)\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { error } = await client.deleteVectors({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   keys: ['doc-1', 'doc-2', 'doc-3']\n   * })\n   * if (!error) {\n   *   console.log('Vectors deleted successfully')\n   * }\n   * ```\n   */\n  async deleteVectors(options: DeleteVectorsOptions): Promise<ApiResponse<undefined>> {\n    try {\n      // Validate batch size\n      if (options.keys.length < 1 || options.keys.length > 500) {\n        throw new Error('Keys batch size must be between 1 and 500 items')\n      }\n\n      const data = await post(this.fetch, `${this.url}/DeleteVectors`, options, {\n        headers: this.headers,\n      })\n      return { data: data || {}, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}