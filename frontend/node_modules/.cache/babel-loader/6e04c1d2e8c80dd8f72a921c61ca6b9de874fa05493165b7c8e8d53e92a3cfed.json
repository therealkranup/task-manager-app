{"ast":null,"code":"/**\n * Base error class for all Storage Vectors errors\n */\nexport class StorageVectorsError extends Error {\n  constructor(message) {\n    super(message);\n    this.__isStorageVectorsError = true;\n    this.name = 'StorageVectorsError';\n  }\n}\n/**\n * Type guard to check if an error is a StorageVectorsError\n * @param error - The error to check\n * @returns True if the error is a StorageVectorsError\n */\nexport function isStorageVectorsError(error) {\n  return typeof error === 'object' && error !== null && '__isStorageVectorsError' in error;\n}\n/**\n * API error returned from S3 Vectors service\n * Includes HTTP status code and service-specific error code\n */\nexport class StorageVectorsApiError extends StorageVectorsError {\n  constructor(message, status, statusCode) {\n    super(message);\n    this.name = 'StorageVectorsApiError';\n    this.status = status;\n    this.statusCode = statusCode;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      statusCode: this.statusCode\n    };\n  }\n}\n/**\n * Unknown error that doesn't match expected error patterns\n * Wraps the original error for debugging\n */\nexport class StorageVectorsUnknownError extends StorageVectorsError {\n  constructor(message, originalError) {\n    super(message);\n    this.name = 'StorageVectorsUnknownError';\n    this.originalError = originalError;\n  }\n}\n/**\n * Error codes specific to S3 Vectors API\n * Maps AWS service errors to application-friendly error codes\n */\nexport var StorageVectorsErrorCode;\n(function (StorageVectorsErrorCode) {\n  /** Internal server fault (HTTP 500) */\n  StorageVectorsErrorCode[\"InternalError\"] = \"InternalError\";\n  /** Resource already exists / conflict (HTTP 409) */\n  StorageVectorsErrorCode[\"S3VectorConflictException\"] = \"S3VectorConflictException\";\n  /** Resource not found (HTTP 404) */\n  StorageVectorsErrorCode[\"S3VectorNotFoundException\"] = \"S3VectorNotFoundException\";\n  /** Delete bucket while not empty (HTTP 400) */\n  StorageVectorsErrorCode[\"S3VectorBucketNotEmpty\"] = \"S3VectorBucketNotEmpty\";\n  /** Exceeds bucket quota/limit (HTTP 400) */\n  StorageVectorsErrorCode[\"S3VectorMaxBucketsExceeded\"] = \"S3VectorMaxBucketsExceeded\";\n  /** Exceeds index quota/limit (HTTP 400) */\n  StorageVectorsErrorCode[\"S3VectorMaxIndexesExceeded\"] = \"S3VectorMaxIndexesExceeded\";\n})(StorageVectorsErrorCode || (StorageVectorsErrorCode = {}));","map":{"version":3,"names":["StorageVectorsError","Error","constructor","message","__isStorageVectorsError","name","isStorageVectorsError","error","StorageVectorsApiError","status","statusCode","toJSON","StorageVectorsUnknownError","originalError","StorageVectorsErrorCode"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/lib/vectors/errors.ts"],"sourcesContent":["/**\n * Base error class for all Storage Vectors errors\n */\nexport class StorageVectorsError extends Error {\n  protected __isStorageVectorsError = true\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'StorageVectorsError'\n  }\n}\n\n/**\n * Type guard to check if an error is a StorageVectorsError\n * @param error - The error to check\n * @returns True if the error is a StorageVectorsError\n */\nexport function isStorageVectorsError(error: unknown): error is StorageVectorsError {\n  return typeof error === 'object' && error !== null && '__isStorageVectorsError' in error\n}\n\n/**\n * API error returned from S3 Vectors service\n * Includes HTTP status code and service-specific error code\n */\nexport class StorageVectorsApiError extends StorageVectorsError {\n  status: number\n  statusCode: string\n\n  constructor(message: string, status: number, statusCode: string) {\n    super(message)\n    this.name = 'StorageVectorsApiError'\n    this.status = status\n    this.statusCode = statusCode\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      statusCode: this.statusCode,\n    }\n  }\n}\n\n/**\n * Unknown error that doesn't match expected error patterns\n * Wraps the original error for debugging\n */\nexport class StorageVectorsUnknownError extends StorageVectorsError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'StorageVectorsUnknownError'\n    this.originalError = originalError\n  }\n}\n\n/**\n * Error codes specific to S3 Vectors API\n * Maps AWS service errors to application-friendly error codes\n */\nexport enum StorageVectorsErrorCode {\n  /** Internal server fault (HTTP 500) */\n  InternalError = 'InternalError',\n  /** Resource already exists / conflict (HTTP 409) */\n  S3VectorConflictException = 'S3VectorConflictException',\n  /** Resource not found (HTTP 404) */\n  S3VectorNotFoundException = 'S3VectorNotFoundException',\n  /** Delete bucket while not empty (HTTP 400) */\n  S3VectorBucketNotEmpty = 'S3VectorBucketNotEmpty',\n  /** Exceeds bucket quota/limit (HTTP 400) */\n  S3VectorMaxBucketsExceeded = 'S3VectorMaxBucketsExceeded',\n  /** Exceeds index quota/limit (HTTP 400) */\n  S3VectorMaxIndexesExceeded = 'S3VectorMaxIndexesExceeded',\n}\n"],"mappings":"AAAA;;;AAGA,OAAM,MAAOA,mBAAoB,SAAQC,KAAK;EAG5CC,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;IAHN,KAAAC,uBAAuB,GAAG,IAAI;IAItC,IAAI,CAACC,IAAI,GAAG,qBAAqB;EACnC;;AAGF;;;;;AAKA,OAAM,SAAUC,qBAAqBA,CAACC,KAAc;EAClD,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,yBAAyB,IAAIA,KAAK;AAC1F;AAEA;;;;AAIA,OAAM,MAAOC,sBAAuB,SAAQR,mBAAmB;EAI7DE,YAAYC,OAAe,EAAEM,MAAc,EAAEC,UAAkB;IAC7D,KAAK,CAACP,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,wBAAwB;IACpC,IAAI,CAACI,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEAC,MAAMA,CAAA;IACJ,OAAO;MACLN,IAAI,EAAE,IAAI,CAACA,IAAI;MACfF,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBM,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,UAAU,EAAE,IAAI,CAACA;KAClB;EACH;;AAGF;;;;AAIA,OAAM,MAAOE,0BAA2B,SAAQZ,mBAAmB;EAGjEE,YAAYC,OAAe,EAAEU,aAAsB;IACjD,KAAK,CAACV,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,4BAA4B;IACxC,IAAI,CAACQ,aAAa,GAAGA,aAAa;EACpC;;AAGF;;;;AAIA,WAAYC,uBAaX;AAbD,WAAYA,uBAAuB;EACjC;EACAA,uBAAA,mCAA+B;EAC/B;EACAA,uBAAA,2DAAuD;EACvD;EACAA,uBAAA,2DAAuD;EACvD;EACAA,uBAAA,qDAAiD;EACjD;EACAA,uBAAA,6DAAyD;EACzD;EACAA,uBAAA,6DAAyD;AAC3D,CAAC,EAbWA,uBAAuB,KAAvBA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}