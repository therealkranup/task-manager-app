{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { DEFAULT_HEADERS } from './constants';\nimport { isStorageVectorsError } from './errors';\nimport { post } from './fetch';\nimport { resolveFetch } from './helpers';\n/**\n * API class for managing Vector Indexes within Vector Buckets\n * Provides methods for creating, reading, listing, and deleting vector indexes\n */\nexport default class VectorIndexApi {\n  constructor(url, headers = {}, fetch) {\n    this.shouldThrowOnError = false;\n    this.url = url.replace(/\\/$/, '');\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   * @example\n   * ```typescript\n   * const client = new VectorIndexApi(url, headers)\n   * client.throwOnError()\n   * const { data } = await client.createIndex(options) // throws on error\n   * ```\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\n   * Creates a new vector index within a bucket\n   * Defines the schema for vectors including dimensionality, distance metric, and metadata config\n   *\n   * @param options - Index configuration\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Unique name for the index within the bucket\n   * @param options.dataType - Data type for vector components (currently only 'float32')\n   * @param options.dimension - Dimensionality of vectors (e.g., 384, 768, 1536)\n   * @param options.distanceMetric - Similarity metric ('cosine', 'euclidean', 'dotproduct')\n   * @param options.metadataConfiguration - Optional config for non-filterable metadata keys\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorConflictException` if index already exists (HTTP 409)\n   * - `S3VectorMaxIndexesExceeded` if quota exceeded (HTTP 400)\n   * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.createIndex({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine',\n   *   metadataConfiguration: {\n   *     nonFilterableMetadataKeys: ['raw_text', 'internal_id']\n   *   }\n   * })\n   * ```\n   */\n  createIndex(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/CreateIndex`, options, {\n          headers: this.headers\n        });\n        return {\n          data: data || {},\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves metadata for a specific vector index\n   * Returns index configuration including dimension, distance metric, and metadata settings\n   *\n   * @param vectorBucketName - Name of the parent vector bucket\n   * @param indexName - Name of the index to retrieve\n   * @returns Promise with index metadata or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.getIndex('embeddings-prod', 'documents-openai-small')\n   * if (data) {\n   *   console.log('Index dimension:', data.index.dimension)\n   *   console.log('Distance metric:', data.index.distanceMetric)\n   * }\n   * ```\n   */\n  getIndex(vectorBucketName, indexName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/GetIndex`, {\n          vectorBucketName,\n          indexName\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Lists vector indexes within a bucket with optional filtering and pagination\n   * Supports prefix-based filtering and paginated results\n   *\n   * @param options - Listing options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.prefix - Filter indexes by name prefix\n   * @param options.maxResults - Maximum results per page (default: 100)\n   * @param options.nextToken - Pagination token from previous response\n   * @returns Promise with list of indexes and pagination token\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // List all indexes in a bucket\n   * const { data, error } = await client.listIndexes({\n   *   vectorBucketName: 'embeddings-prod',\n   *   prefix: 'documents-'\n   * })\n   * if (data) {\n   *   console.log('Found indexes:', data.indexes.map(i => i.indexName))\n   *   // Fetch next page if available\n   *   if (data.nextToken) {\n   *     const next = await client.listIndexes({\n   *       vectorBucketName: 'embeddings-prod',\n   *       nextToken: data.nextToken\n   *     })\n   *   }\n   * }\n   * ```\n   */\n  listIndexes(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/ListIndexes`, options, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes a vector index and all its data\n   * This operation removes the index schema and all vectors stored in the index\n   *\n   * @param vectorBucketName - Name of the parent vector bucket\n   * @param indexName - Name of the index to delete\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Delete an index and all its vectors\n   * const { error } = await client.deleteIndex('embeddings-prod', 'old-index')\n   * if (!error) {\n   *   console.log('Index deleted successfully')\n   * }\n   * ```\n   */\n  deleteIndex(vectorBucketName, indexName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/DeleteIndex`, {\n          vectorBucketName,\n          indexName\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data || {},\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageVectorsError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["DEFAULT_HEADERS","isStorageVectorsError","post","resolveFetch","VectorIndexApi","constructor","url","headers","fetch","shouldThrowOnError","replace","Object","assign","throwOnError","createIndex","options","data","error","getIndex","vectorBucketName","indexName","listIndexes","deleteIndex"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/lib/vectors/VectorIndexApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from './constants'\nimport { isStorageVectorsError } from './errors'\nimport { Fetch, post } from './fetch'\nimport { resolveFetch } from './helpers'\nimport {\n  ApiResponse,\n  VectorIndex,\n  ListIndexesOptions,\n  ListIndexesResponse,\n  VectorDataType,\n  DistanceMetric,\n  MetadataConfiguration,\n} from './types'\n\n/**\n * Options for creating a vector index\n */\nexport interface CreateIndexOptions {\n  vectorBucketName: string\n  indexName: string\n  dataType: VectorDataType\n  dimension: number\n  distanceMetric: DistanceMetric\n  metadataConfiguration?: MetadataConfiguration\n}\n\n/**\n * API class for managing Vector Indexes within Vector Buckets\n * Provides methods for creating, reading, listing, and deleting vector indexes\n */\nexport default class VectorIndexApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n  protected shouldThrowOnError = false\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url.replace(/\\/$/, '')\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   * @example\n   * ```typescript\n   * const client = new VectorIndexApi(url, headers)\n   * client.throwOnError()\n   * const { data } = await client.createIndex(options) // throws on error\n   * ```\n   */\n  public throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  /**\n   * Creates a new vector index within a bucket\n   * Defines the schema for vectors including dimensionality, distance metric, and metadata config\n   *\n   * @param options - Index configuration\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.indexName - Unique name for the index within the bucket\n   * @param options.dataType - Data type for vector components (currently only 'float32')\n   * @param options.dimension - Dimensionality of vectors (e.g., 384, 768, 1536)\n   * @param options.distanceMetric - Similarity metric ('cosine', 'euclidean', 'dotproduct')\n   * @param options.metadataConfiguration - Optional config for non-filterable metadata keys\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorConflictException` if index already exists (HTTP 409)\n   * - `S3VectorMaxIndexesExceeded` if quota exceeded (HTTP 400)\n   * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.createIndex({\n   *   vectorBucketName: 'embeddings-prod',\n   *   indexName: 'documents-openai-small',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine',\n   *   metadataConfiguration: {\n   *     nonFilterableMetadataKeys: ['raw_text', 'internal_id']\n   *   }\n   * })\n   * ```\n   */\n  async createIndex(options: CreateIndexOptions): Promise<ApiResponse<undefined>> {\n    try {\n      const data = await post(this.fetch, `${this.url}/CreateIndex`, options, {\n        headers: this.headers,\n      })\n      return { data: data || {}, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves metadata for a specific vector index\n   * Returns index configuration including dimension, distance metric, and metadata settings\n   *\n   * @param vectorBucketName - Name of the parent vector bucket\n   * @param indexName - Name of the index to retrieve\n   * @returns Promise with index metadata or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await client.getIndex('embeddings-prod', 'documents-openai-small')\n   * if (data) {\n   *   console.log('Index dimension:', data.index.dimension)\n   *   console.log('Distance metric:', data.index.distanceMetric)\n   * }\n   * ```\n   */\n  async getIndex(\n    vectorBucketName: string,\n    indexName: string\n  ): Promise<ApiResponse<{ index: VectorIndex }>> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/GetIndex`,\n        { vectorBucketName, indexName },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Lists vector indexes within a bucket with optional filtering and pagination\n   * Supports prefix-based filtering and paginated results\n   *\n   * @param options - Listing options\n   * @param options.vectorBucketName - Name of the parent vector bucket\n   * @param options.prefix - Filter indexes by name prefix\n   * @param options.maxResults - Maximum results per page (default: 100)\n   * @param options.nextToken - Pagination token from previous response\n   * @returns Promise with list of indexes and pagination token\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // List all indexes in a bucket\n   * const { data, error } = await client.listIndexes({\n   *   vectorBucketName: 'embeddings-prod',\n   *   prefix: 'documents-'\n   * })\n   * if (data) {\n   *   console.log('Found indexes:', data.indexes.map(i => i.indexName))\n   *   // Fetch next page if available\n   *   if (data.nextToken) {\n   *     const next = await client.listIndexes({\n   *       vectorBucketName: 'embeddings-prod',\n   *       nextToken: data.nextToken\n   *     })\n   *   }\n   * }\n   * ```\n   */\n  async listIndexes(options: ListIndexesOptions): Promise<ApiResponse<ListIndexesResponse>> {\n    try {\n      const data = await post(this.fetch, `${this.url}/ListIndexes`, options, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Deletes a vector index and all its data\n   * This operation removes the index schema and all vectors stored in the index\n   *\n   * @param vectorBucketName - Name of the parent vector bucket\n   * @param indexName - Name of the index to delete\n   * @returns Promise with empty response on success or error\n   *\n   * @throws {StorageVectorsApiError} With code:\n   * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n   * - `InternalError` for server errors (HTTP 500)\n   *\n   * @example\n   * ```typescript\n   * // Delete an index and all its vectors\n   * const { error } = await client.deleteIndex('embeddings-prod', 'old-index')\n   * if (!error) {\n   *   console.log('Index deleted successfully')\n   * }\n   * ```\n   */\n  async deleteIndex(vectorBucketName: string, indexName: string): Promise<ApiResponse<undefined>> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/DeleteIndex`,\n        { vectorBucketName, indexName },\n        { headers: this.headers }\n      )\n      return { data: data || {}, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageVectorsError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}