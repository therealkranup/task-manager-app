{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/**\n * Resolves the fetch implementation to use\n * Uses custom fetch if provided, otherwise falls back to:\n * - Native fetch in browser/modern environments\n * - @supabase/node-fetch polyfill in Node.js environments without fetch\n *\n * @param customFetch - Optional custom fetch implementation\n * @returns Resolved fetch function\n */\nexport const resolveFetch = customFetch => {\n  let _fetch;\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) => import('@supabase/node-fetch').then(({\n      default: fetch\n    }) => fetch(...args));\n  } else {\n    _fetch = fetch;\n  }\n  return (...args) => _fetch(...args);\n};\n/**\n * Resolves the Response constructor to use\n * Uses native Response in browser/modern environments\n * Falls back to @supabase/node-fetch polyfill in Node.js environments\n *\n * @returns Response constructor\n */\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (yield import('@supabase/node-fetch')).Response;\n  }\n  return Response;\n});\n/**\n * Determine if input is a plain object\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n *\n * @param value - Value to check\n * @returns True if value is a plain object\n * @source https://github.com/sindresorhus/is-plain-obj\n */\nexport const isPlainObject = value => {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n};\n/**\n * Normalizes a number array to float32 format\n * Ensures all vector values are valid 32-bit floats\n *\n * @param values - Array of numbers to normalize\n * @returns Normalized float32 array\n */\nexport const normalizeToFloat32 = values => {\n  // Use Float32Array to ensure proper precision\n  return Array.from(new Float32Array(values));\n};\n/**\n * Validates vector dimensions match expected dimension\n * Throws error if dimensions don't match\n *\n * @param vector - Vector data to validate\n * @param expectedDimension - Expected vector dimension\n * @throws Error if dimensions don't match\n */\nexport const validateVectorDimension = (vector, expectedDimension) => {\n  if (expectedDimension !== undefined && vector.float32.length !== expectedDimension) {\n    throw new Error(`Vector dimension mismatch: expected ${expectedDimension}, got ${vector.float32.length}`);\n  }\n};","map":{"version":3,"names":["resolveFetch","customFetch","_fetch","fetch","args","then","default","resolveResponse","__awaiter","Response","isPlainObject","value","prototype","Object","getPrototypeOf","Symbol","toStringTag","iterator","normalizeToFloat32","values","Array","from","Float32Array","validateVectorDimension","vector","expectedDimension","undefined","float32","length","Error"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/lib/vectors/helpers.ts"],"sourcesContent":["type Fetch = typeof fetch\n\n/**\n * Resolves the fetch implementation to use\n * Uses custom fetch if provided, otherwise falls back to:\n * - Native fetch in browser/modern environments\n * - @supabase/node-fetch polyfill in Node.js environments without fetch\n *\n * @param customFetch - Optional custom fetch implementation\n * @returns Resolved fetch function\n */\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\n/**\n * Resolves the Response constructor to use\n * Uses native Response in browser/modern environments\n * Falls back to @supabase/node-fetch polyfill in Node.js environments\n *\n * @returns Response constructor\n */\nexport const resolveResponse = async (): Promise<typeof Response> => {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (await import('@supabase/node-fetch' as any)).Response\n  }\n\n  return Response\n}\n\n/**\n * Determine if input is a plain object\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n *\n * @param value - Value to check\n * @returns True if value is a plain object\n * @source https://github.com/sindresorhus/is-plain-obj\n */\nexport const isPlainObject = (value: object): boolean => {\n  if (typeof value !== 'object' || value === null) {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return (\n    (prototype === null ||\n      prototype === Object.prototype ||\n      Object.getPrototypeOf(prototype) === null) &&\n    !(Symbol.toStringTag in value) &&\n    !(Symbol.iterator in value)\n  )\n}\n\n/**\n * Normalizes a number array to float32 format\n * Ensures all vector values are valid 32-bit floats\n *\n * @param values - Array of numbers to normalize\n * @returns Normalized float32 array\n */\nexport const normalizeToFloat32 = (values: number[]): number[] => {\n  // Use Float32Array to ensure proper precision\n  return Array.from(new Float32Array(values))\n}\n\n/**\n * Validates vector dimensions match expected dimension\n * Throws error if dimensions don't match\n *\n * @param vector - Vector data to validate\n * @param expectedDimension - Expected vector dimension\n * @throws Error if dimensions don't match\n */\nexport const validateVectorDimension = (\n  vector: { float32: number[] },\n  expectedDimension?: number\n): void => {\n  if (expectedDimension !== undefined && vector.float32.length !== expectedDimension) {\n    throw new Error(\n      `Vector dimension mismatch: expected ${expectedDimension}, got ${vector.float32.length}`\n    )\n  }\n}\n"],"mappings":";AAEA;;;;;;;;;AASA,OAAO,MAAMA,YAAY,GAAIC,WAAmB,IAAW;EACzD,IAAIC,MAAa;EACjB,IAAID,WAAW,EAAE;IACfC,MAAM,GAAGD,WAAW;EACtB,CAAC,MAAM,IAAI,OAAOE,KAAK,KAAK,WAAW,EAAE;IACvCD,MAAM,GAAGA,CAAC,GAAGE,IAAI,KACf,MAAM,CAAC,sBAA6B,CAAC,CAACC,IAAI,CAAC,CAAC;MAAEC,OAAO,EAAEH;IAAK,CAAE,KAAKA,KAAK,CAAC,GAAGC,IAAI,CAAC,CAAC;EACtF,CAAC,MAAM;IACLF,MAAM,GAAGC,KAAK;EAChB;EACA,OAAO,CAAC,GAAGC,IAAI,KAAKF,MAAM,CAAC,GAAGE,IAAI,CAAC;AACrC,CAAC;AAED;;;;;;;AAOA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAqCC,SAAA;EAClE,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IACnC;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,sBAA6B,CAAC,EAAEA,QAAQ;EAC/D;EAEA,OAAOA,QAAQ;AACjB,CAAC;AAED;;;;;;;;AAQA,OAAO,MAAMC,aAAa,GAAIC,KAAa,IAAa;EACtD,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;IAC/C,OAAO,KAAK;EACd;EAEA,MAAMC,SAAS,GAAGC,MAAM,CAACC,cAAc,CAACH,KAAK,CAAC;EAC9C,OACE,CAACC,SAAS,KAAK,IAAI,IACjBA,SAAS,KAAKC,MAAM,CAACD,SAAS,IAC9BC,MAAM,CAACC,cAAc,CAACF,SAAS,CAAC,KAAK,IAAI,KAC3C,EAAEG,MAAM,CAACC,WAAW,IAAIL,KAAK,CAAC,IAC9B,EAAEI,MAAM,CAACE,QAAQ,IAAIN,KAAK,CAAC;AAE/B,CAAC;AAED;;;;;;;AAOA,OAAO,MAAMO,kBAAkB,GAAIC,MAAgB,IAAc;EAC/D;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAIC,YAAY,CAACH,MAAM,CAAC,CAAC;AAC7C,CAAC;AAED;;;;;;;;AAQA,OAAO,MAAMI,uBAAuB,GAAGA,CACrCC,MAA6B,EAC7BC,iBAA0B,KAClB;EACR,IAAIA,iBAAiB,KAAKC,SAAS,IAAIF,MAAM,CAACG,OAAO,CAACC,MAAM,KAAKH,iBAAiB,EAAE;IAClF,MAAM,IAAII,KAAK,CACb,uCAAuCJ,iBAAiB,SAASD,MAAM,CAACG,OAAO,CAACC,MAAM,EAAE,CACzF;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}