{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\n/**\n * API class for managing Analytics Buckets using Iceberg tables\n * Provides methods for creating, listing, and deleting analytics buckets\n */\nexport default class StorageAnalyticsApi {\n  /**\n   * Creates a new StorageAnalyticsApi instance\n   * @param url - The base URL for the storage API\n   * @param headers - HTTP headers to include in requests\n   * @param fetch - Optional custom fetch implementation\n   */\n  constructor(url, headers = {}, fetch) {\n    this.shouldThrowOnError = false;\n    this.url = url.replace(/\\/$/, '');\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\n   * Creates a new analytics bucket using Iceberg tables\n   * Analytics buckets are optimized for analytical queries and data processing\n   *\n   * @param name A unique name for the bucket you are creating\n   * @returns Promise with newly created bucket name or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await storage.analytics.createBucket('analytics-data')\n   * if (error) {\n   *   console.error('Failed to create analytics bucket:', error.message)\n   * } else {\n   *   console.log('Created bucket:', data.name)\n   * }\n   * ```\n   */\n  createBucket(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          name\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of all Analytics Storage buckets within an existing project\n   * Only returns buckets of type 'ANALYTICS'\n   *\n   * @param options Query parameters for listing buckets\n   * @param options.limit Maximum number of buckets to return\n   * @param options.offset Number of buckets to skip\n   * @param options.sortColumn Column to sort by ('id', 'name', 'created_at', 'updated_at')\n   * @param options.sortOrder Sort order ('asc' or 'desc')\n   * @param options.search Search term to filter bucket names\n   * @returns Promise with list of analytics buckets or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await storage.analytics.listBuckets({\n   *   limit: 10,\n   *   offset: 0,\n   *   sortColumn: 'created_at',\n   *   sortOrder: 'desc',\n   *   search: 'analytics'\n   * })\n   * if (data) {\n   *   console.log('Found analytics buckets:', data.length)\n   *   data.forEach(bucket => console.log(`- ${bucket.name}`))\n   * }\n   * ```\n   */\n  listBuckets(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // Build query string from options\n        const queryParams = new URLSearchParams();\n        if ((options === null || options === void 0 ? void 0 : options.limit) !== undefined) queryParams.set('limit', options.limit.toString());\n        if ((options === null || options === void 0 ? void 0 : options.offset) !== undefined) queryParams.set('offset', options.offset.toString());\n        if (options === null || options === void 0 ? void 0 : options.sortColumn) queryParams.set('sortColumn', options.sortColumn);\n        if (options === null || options === void 0 ? void 0 : options.sortOrder) queryParams.set('sortOrder', options.sortOrder);\n        if (options === null || options === void 0 ? void 0 : options.search) queryParams.set('search', options.search);\n        const queryString = queryParams.toString();\n        const url = queryString ? `${this.url}/bucket?${queryString}` : `${this.url}/bucket`;\n        const data = yield get(this.fetch, url, {\n          headers: this.headers\n        });\n        // Filter to only return analytics buckets\n        const analyticsBuckets = Array.isArray(data) ? data.filter(bucket => bucket.type === 'ANALYTICS') : [];\n        return {\n          data: analyticsBuckets,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes an existing analytics bucket\n   * A bucket can't be deleted with existing objects inside it\n   * You must first empty the bucket before deletion\n   *\n   * @param bucketId The unique identifier of the bucket you would like to delete\n   * @returns Promise with success message or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await analyticsApi.deleteBucket('old-analytics-bucket')\n   * if (error) {\n   *   console.error('Failed to delete bucket:', error.message)\n   * } else {\n   *   console.log('Bucket deleted successfully:', data.message)\n   * }\n   * ```\n   */\n  deleteBucket(bucketId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${bucketId}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["DEFAULT_HEADERS","isStorageError","get","post","remove","resolveFetch","StorageAnalyticsApi","constructor","url","headers","fetch","shouldThrowOnError","replace","Object","assign","throwOnError","createBucket","name","data","error","listBuckets","options","queryParams","URLSearchParams","limit","undefined","set","toString","offset","sortColumn","sortOrder","search","queryString","analyticsBuckets","Array","isArray","filter","bucket","type","deleteBucket","bucketId"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/packages/StorageAnalyticsApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { AnalyticBucket, Bucket } from '../lib/types'\n\n/**\n * API class for managing Analytics Buckets using Iceberg tables\n * Provides methods for creating, listing, and deleting analytics buckets\n */\nexport default class StorageAnalyticsApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n  protected shouldThrowOnError = false\n\n  /**\n   * Creates a new StorageAnalyticsApi instance\n   * @param url - The base URL for the storage API\n   * @param headers - HTTP headers to include in requests\n   * @param fetch - Optional custom fetch implementation\n   */\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url.replace(/\\/$/, '')\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Enable throwing errors instead of returning them in the response\n   * When enabled, failed operations will throw instead of returning { data: null, error }\n   *\n   * @returns This instance for method chaining\n   */\n  public throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  /**\n   * Creates a new analytics bucket using Iceberg tables\n   * Analytics buckets are optimized for analytical queries and data processing\n   *\n   * @param name A unique name for the bucket you are creating\n   * @returns Promise with newly created bucket name or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await storage.analytics.createBucket('analytics-data')\n   * if (error) {\n   *   console.error('Failed to create analytics bucket:', error.message)\n   * } else {\n   *   console.log('Created bucket:', data.name)\n   * }\n   * ```\n   */\n  async createBucket(name: string): Promise<\n    | {\n        data: AnalyticBucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(this.fetch, `${this.url}/bucket`, { name }, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of all Analytics Storage buckets within an existing project\n   * Only returns buckets of type 'ANALYTICS'\n   *\n   * @param options Query parameters for listing buckets\n   * @param options.limit Maximum number of buckets to return\n   * @param options.offset Number of buckets to skip\n   * @param options.sortColumn Column to sort by ('id', 'name', 'created_at', 'updated_at')\n   * @param options.sortOrder Sort order ('asc' or 'desc')\n   * @param options.search Search term to filter bucket names\n   * @returns Promise with list of analytics buckets or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await storage.analytics.listBuckets({\n   *   limit: 10,\n   *   offset: 0,\n   *   sortColumn: 'created_at',\n   *   sortOrder: 'desc',\n   *   search: 'analytics'\n   * })\n   * if (data) {\n   *   console.log('Found analytics buckets:', data.length)\n   *   data.forEach(bucket => console.log(`- ${bucket.name}`))\n   * }\n   * ```\n   */\n  async listBuckets(options?: {\n    limit?: number\n    offset?: number\n    sortColumn?: 'id' | 'name' | 'created_at' | 'updated_at'\n    sortOrder?: 'asc' | 'desc'\n    search?: string\n  }): Promise<\n    | {\n        data: AnalyticBucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      // Build query string from options\n      const queryParams = new URLSearchParams()\n      if (options?.limit !== undefined) queryParams.set('limit', options.limit.toString())\n      if (options?.offset !== undefined) queryParams.set('offset', options.offset.toString())\n      if (options?.sortColumn) queryParams.set('sortColumn', options.sortColumn)\n      if (options?.sortOrder) queryParams.set('sortOrder', options.sortOrder)\n      if (options?.search) queryParams.set('search', options.search)\n\n      const queryString = queryParams.toString()\n      const url = queryString ? `${this.url}/bucket?${queryString}` : `${this.url}/bucket`\n\n      const data = await get(this.fetch, url, { headers: this.headers })\n      // Filter to only return analytics buckets\n      const analyticsBuckets = Array.isArray(data)\n        ? data.filter((bucket: Bucket) => bucket.type === 'ANALYTICS')\n        : []\n      return { data: analyticsBuckets, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing analytics bucket\n   * A bucket can't be deleted with existing objects inside it\n   * You must first empty the bucket before deletion\n   *\n   * @param bucketId The unique identifier of the bucket you would like to delete\n   * @returns Promise with success message or error\n   *\n   * @example\n   * ```typescript\n   * const { data, error } = await analyticsApi.deleteBucket('old-analytics-bucket')\n   * if (error) {\n   *   console.error('Failed to delete bucket:', error.message)\n   * } else {\n   *   console.log('Bucket deleted successfully:', data.message)\n   * }\n   * ```\n   */\n  async deleteBucket(bucketId: string): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${bucketId}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}