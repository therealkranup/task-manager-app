{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { isStorageError } from '../lib/errors';\nexport default class StreamDownloadBuilder {\n  constructor(downloadFn, shouldThrowOnError) {\n    this.downloadFn = downloadFn;\n    this.shouldThrowOnError = shouldThrowOnError;\n  }\n  then(onfulfilled, onrejected) {\n    return this.execute().then(onfulfilled, onrejected);\n  }\n  execute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = yield this.downloadFn();\n        return {\n          data: result.body,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["isStorageError","StreamDownloadBuilder","constructor","downloadFn","shouldThrowOnError","then","onfulfilled","onrejected","execute","result","data","body","error"],"sources":["/Users/anupkumar/task-manager-app/frontend/node_modules/@supabase/storage-js/src/packages/StreamDownloadBuilder.ts"],"sourcesContent":["import { isStorageError } from '../lib/errors'\nimport { DownloadResult } from '../lib/types'\n\nexport default class StreamDownloadBuilder implements PromiseLike<DownloadResult<ReadableStream>> {\n  constructor(\n    private downloadFn: () => Promise<Response>,\n    private shouldThrowOnError: boolean\n  ) {}\n\n  then<TResult1 = DownloadResult<ReadableStream>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: DownloadResult<ReadableStream>) => TResult1 | PromiseLike<TResult1>)\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.execute().then(onfulfilled, onrejected)\n  }\n\n  private async execute(): Promise<DownloadResult<ReadableStream>> {\n    try {\n      const result = await this.downloadFn()\n\n      return {\n        data: result.body as ReadableStream,\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,eAAe;AAG9C,eAAc,MAAOC,qBAAqB;EACxCC,YACUC,UAAmC,EACnCC,kBAA2B;IAD3B,KAAAD,UAAU,GAAVA,UAAU;IACV,KAAAC,kBAAkB,GAAlBA,kBAAkB;EACzB;EAEHC,IAAIA,CACFC,WAEQ,EACRC,UAAuE;IAEvE,OAAO,IAAI,CAACC,OAAO,EAAE,CAACH,IAAI,CAACC,WAAW,EAAEC,UAAU,CAAC;EACrD;EAEcC,OAAOA,CAAA;;MACnB,IAAI;QACF,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACN,UAAU,EAAE;QAEtC,OAAO;UACLO,IAAI,EAAED,MAAM,CAACE,IAAsB;UACnCC,KAAK,EAAE;SACR;MACH,CAAC,CAAC,OAAOA,KAAK,EAAE;QACd,IAAI,IAAI,CAACR,kBAAkB,EAAE;UAC3B,MAAMQ,KAAK;QACb;QAEA,IAAIZ,cAAc,CAACY,KAAK,CAAC,EAAE;UACzB,OAAO;YAAEF,IAAI,EAAE,IAAI;YAAEE;UAAK,CAAE;QAC9B;QAEA,MAAMA,KAAK;MACb;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}